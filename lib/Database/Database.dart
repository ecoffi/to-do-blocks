import 'package:moor/moor.dart';
import 'package:moor/ffi.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:moor/moor.dart';
import 'dart:io';

part 'Database.g.dart';

//contains database definition

class Tasks extends Table {
  IntColumn get id =>integer().autoIncrement()();
  TextColumn get title => text()();
  TextColumn get description => text().nullable()();
  IntColumn get priority => integer().nullable()();
  BoolColumn get isComplete => boolean()();
  DateTimeColumn get start => dateTime().nullable()();
  DateTimeColumn get end => dateTime().nullable()();
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return VmDatabase(file);
  });
}

@UseMoor(tables: [Tasks])
class Database extends _$Database {
  Database() : super(_openConnection());

  @override
  int get schemaVersion => 1;

  ///get all tasks
  Future<List<Task>> getAllTaskEntries() => select(tasks).get();

  ///watch all tasks
  Stream<List<Task>> watchTaskEntries() => select(tasks).watch();

  ///add new task to db
  ///returns the autogenerated id
  Future<int> insertTask(Task entry) {
    return into(tasks).insert(entry);
  }

  Future updateTask(Task task) => update(tasks).replace(task);
}